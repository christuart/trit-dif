// generated by Fast Light User Interface Designer (fluid) version 1.0109

#ifndef gui_h
#define gui_h
#include <FL/Fl.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/Fl_Pixmap.H>
#include <FL/Fl_Bitmap.H>
#include <FL/Fl_GIF_Image.H>
#include "Cartesian.h"
extern void userAction(Fl_Widget* target); 
extern void userAction(selection sel, Ca_Canvas* sender); 
extern void reduce_all(); 
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Repeat_Button.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Check_Button.H>

class UserInterface {
public:
  Fl_Repeat_Button* ChnButton[53]; 
  Fl_Input* Delays[52]; 
  Fl_Double_Window* make_window();
  Fl_Double_Window *main_window;
  Fl_Group *plotLH_group;
  Ca_Canvas *plotH;
private:
  void cb_plotH_i(Ca_Canvas*, void*);
  static void cb_plotH(Ca_Canvas*, void*);
public:
  Ca_Y_Axis *ampH;
  Ca_X_Axis *timeH;
  Fl_Output *HSlabel;
  Fl_Group *plot_group;
  Fl_Button *open_btn;
private:
  void cb_open_btn_i(Fl_Button*, void*);
  static void cb_open_btn(Fl_Button*, void*);
public:
  Fl_Repeat_Button *Chn0;
private:
  void cb_Chn0_i(Fl_Repeat_Button*, void*);
  static void cb_Chn0(Fl_Repeat_Button*, void*);
public:
  Fl_Value_Input *event;
private:
  void cb_event_i(Fl_Value_Input*, void*);
  static void cb_event(Fl_Value_Input*, void*);
  void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
  void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
public:
  Fl_Value_Input *channel;
private:
  void cb_channel_i(Fl_Value_Input*, void*);
  static void cb_channel(Fl_Value_Input*, void*);
  void cb_2_i(Fl_Button*, void*);
  static void cb_2(Fl_Button*, void*);
  void cb_3_i(Fl_Button*, void*);
  static void cb_3(Fl_Button*, void*);
public:
  Fl_Button *reduce_btn;
private:
  void cb_reduce_btn_i(Fl_Button*, void*);
  static void cb_reduce_btn(Fl_Button*, void*);
public:
  Fl_Input *filename;
private:
  void cb_filename_i(Fl_Input*, void*);
  static void cb_filename(Fl_Input*, void*);
public:
  Fl_Button *quit_btn;
private:
  void cb_quit_btn_i(Fl_Button*, void*);
  static void cb_quit_btn(Fl_Button*, void*);
public:
  Fl_Text_Display *TimelineComment;
  Fl_Text_Display *RootfileComment;
  Fl_Tabs *Config_group;
  Fl_Group *CONFtools;
  Fl_Check_Button *toolsBox_rms;
private:
  void cb_toolsBox_rms_i(Fl_Check_Button*, void*);
  static void cb_toolsBox_rms(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *toolsBox_adc;
private:
  void cb_toolsBox_adc_i(Fl_Check_Button*, void*);
  static void cb_toolsBox_adc(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *Threshold;
private:
  void cb_Threshold_i(Fl_Value_Input*, void*);
  static void cb_Threshold(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *noise;
private:
  void cb_noise_i(Fl_Value_Input*, void*);
  static void cb_noise(Fl_Value_Input*, void*);
public:
  Fl_Check_Button *toolsBox_pretrig;
  Fl_Check_Button *toolsBox_base;
  Fl_Value_Input *baseline;
private:
  void cb_baseline_i(Fl_Value_Input*, void*);
  static void cb_baseline(Fl_Value_Input*, void*);
public:
  Fl_Group *Graph_tool;
  Fl_Value_Input *time_mult;
private:
  void cb_time_mult_i(Fl_Value_Input*, void*);
  static void cb_time_mult(Fl_Value_Input*, void*);
public:
  Fl_Check_Button *time_auto;
  Fl_Check_Button *amp_auto;
  Fl_Value_Input *amp_mult;
private:
  void cb_amp_mult_i(Fl_Value_Input*, void*);
  static void cb_amp_mult(Fl_Value_Input*, void*);
public:
  Fl_Button *set_btn;
private:
  void cb_set_btn_i(Fl_Button*, void*);
  static void cb_set_btn(Fl_Button*, void*);
public:
  Fl_Text_Display *RootfileName;
  void show();
};
#endif
